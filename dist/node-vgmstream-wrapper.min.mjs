import r from"node:os";import{spawn as i}from"node:child_process";import n from"node:fs";import m from"node:path";import{fileURLToPath as t}from"node:url";const e=m.dirname(t(import.meta.url)),o={linux:m.join(e,"../src/vgmstream-linux-cli/vgmstream-cli"),mac:m.join(e,"../src/vgmstream-mac-cli/vgmstream-cli"),wasm:m.join(e,"../src/vgmstream-wasm/vgmstream-cli.wasm"),win:m.join(e,"../src/vgmstream-win/vgmstream-cli.exe"),win64:m.join(e,"../src/vgmstream-win64/vgmstream-cli.exe"),linux:m.join(e,"../src/vgmstream-linux-cli/vgmstream-cli"),darwin:m.join(e,"../src/vgmstream-mac-cli/vgmstream-cli"),win32:m.join(e,"../src/vgmstream-win64/vgmstream-cli.exe")},s=m.join(process.cwd(),".vgmstream");async function c(t){n.existsSync(s)&&n.rmSync(s,{recursive:!0}),n.mkdirSync(s,{recursive:!0});const e=o[r.platform()];return await function(...r){return new Promise((function(n,m){let t="",e="";const o=i(r.shift(),r);o.stdout.on("data",(function(r){t+=r.toString()})),o.stderr.on("data",(function(r){e+=r.toString()})),o.on("error",(function(r){m(r)})),o.on("exit",(function(r,i){n({stdout:t,stderr:e})}))}))}(e,"-S","0","-o",m.join(s,"?n.wav"),m.resolve(t)),n.readdirSync(s).map((r=>({filename:r,buffer:n.readFileSync(m.join(s,r))})))}export{c as decode};
