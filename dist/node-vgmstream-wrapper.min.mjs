import r from"node:os";import{spawn as t}from"node:child_process";import m from"node:fs";import n from"node:path";const e={linux:"src/vgmstream-win/vgmstream-cli",mac:"src/vgmstream-win/vgmstream-cli",wasm:"src/vgmstream-win/vgmstream-cli.wasm",win:"src/vgmstream-win/vgmstream-cli.exe",win64:"src/vgmstream-win64/vgmstream-cli.exe",linux:"src/vgmstream-win/vgmstream-cli",darwin:"src/vgmstream-win/vgmstream-cli",win32:"src/vgmstream-win64/vgmstream-cli.exe"};async function i(i){m.existsSync("./tmp")&&m.rmSync("./tmp",{recursive:!0}),m.mkdirSync("./tmp",{recursive:!0});const s=e[r.platform()];return await function(...r){return new Promise((function(m,n){let e="",i="";const s=t(r.shift(),r);s.stdout.on("data",(function(r){e+=r.toString()})),s.stderr.on("data",(function(r){i+=r.toString()})),s.on("error",(function(r){n(r)})),s.on("exit",(function(r,t){m({stdout:e,stderr:i})}))}))}(s,"-S","0","-o","./tmp/?n.wav",i),m.readdirSync("./tmp").map((r=>({filename:r,buffer:m.readFileSync(n.join("./tmp",r))})))}export{i as decode};
